const express = require('express');
const { Telegraf } = require('telegraf');
const MTProto = require('@mtproto/core');
require('dotenv').config();
const path = require('path'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å path

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 80;
const DOMAIN = process.env.WEBHOOK_URL || 'https://macaque-nice-lion.ngrok-free.app';
const TOKEN = process.env.TELEGRAM_TOKEN || '7297913153:AAFf9EWI68eJpqhVjlW6cB6I6NzBidy3TsE';
const api_id = Number(process.env.API_ID) || 23899456;
const api_hash = process.env.API_HASH || '9a403b5b3b140ea48166b34fb6efbdc1';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTProto-–∫–ª–∏–µ–Ω—Ç–∞
const mtproto = new MTProto({
  api_id,
  api_hash,
  storageOptions: {
    path: 'mtproto-session.json',
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ MTProto
async function mtprotoRequest(method, params) {
  try {
    const result = await mtproto.call(method, params);
    console.log(`MTProto response: ${JSON.stringify(result)}`);
    return result;
  } catch (err) {
    console.error(`MTProto Error: ${err.message}`);
    throw err;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new Telegraf(TOKEN);
const webhookPath = '/webhook';

// Middleware –¥–ª—è –æ–±—Ö–æ–¥–∞ ngrok browser warning
app.use((req, res, next) => {
  res.setHeader('ngrok-skip-browser-warning', 'true');
  next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.use((req, res, next) => {
  console.log(`Incoming request: ${req.method} ${req.url}, Body: ${JSON.stringify(req.body)}`);
  next();
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'dist')));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  try {
    ctx.reply('Welcome to the Slot Machine! Start spinning!');
    console.log(`User ${ctx.from.username} started the bot`);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
bot.command('play', (ctx) => {
  try {
    const gameUrl = 'https://macaque-nice-lion.ngrok-free.app'; // URL –≤–∞—à–µ–π –∏–≥—Ä—ã
    ctx.reply('Click the button below to start the game!', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üéÆ Play the Game',
              web_app: { url: gameUrl }, // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
            },
          ],
        ],
      },
    });
    console.log(`User ${ctx.from.username} requested to play the game.`);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (ctx) => {
  try {
    if (ctx.message.text) {
      ctx.reply(`Echo: ${ctx.message.text}`);
      console.log(`Message from ${ctx.from.username}: ${ctx.message.text}`);
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html')); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
async function setupWebhook() {
  try {
    const webhookUrl = `${DOMAIN}${webhookPath}`;
    const currentStatus = await bot.telegram.getWebhookInfo();

    console.log(`Current webhook status: ${JSON.stringify(currentStatus)}`);
    if (currentStatus.url !== webhookUrl) {
      await bot.telegram.setWebhook(webhookUrl);
      console.log(`Webhook successfully set to ${webhookUrl}`);
    } else {
      console.log(`Webhook already set to ${webhookUrl}`);
    }
  } catch (err) {
    console.error(`Failed to set webhook: ${err.message}`);
  }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
(async () => {
  try {
    await setupWebhook();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
  }
})();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ /webhook
app.post(webhookPath, (req, res) => {
  try {
    console.log(`Webhook request: ${JSON.stringify(req.body)}`); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    bot.handleUpdate(req.body)
      .then(() => {
        console.log('Successfully processed the webhook request.');
        res.status(200).send('OK');
      })
      .catch(err => {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
        res.status(500).send(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
      });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
    res.status(500).send(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
app.get('/status', (req, res) => {
  try {
    res.send('Bot is running and webhook is set!');
    console.log('Status check: Bot is active.');
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: ${err.message}`);
  }
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
app.post('/sendScore', async (req, res) => {
  try {
    const { userId, score } = req.body;
    if (!userId || !score) {
      res.status(400).send('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã userId –∏ score –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.');
      return;
    }
    console.log(`Received score: User ID: ${userId}, Score: ${score}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    await bot.telegram.sendMessage(userId, `Your score: ${score} was successfully recorded!`);

    res.json({ message: 'Score received successfully', userId, score });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${err.message}`);
    res.status(500).send(`Failed to process score: ${err.message}`);
  }
});

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MTProto –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ help.getNearestDc
app.get('/mtproto', async (req, res) => {
  try {
    const result = await mtprotoRequest('help.getNearestDc', {});
    res.json({ message: 'MTProto call successful', result });
  } catch (err) {
    res.status(500).send(`MTProto call failed: ${err.message}`);
  }
});

// –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ MTProto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/sendMessage', async (req, res) => {
  try {
    const { userId, message } = req.body;
    const result = await mtprotoRequest('messages.sendMessage', {
      peer: { _: 'inputPeerUser', user_id: userId },
      message,
      random_id: Math.abs(Math.floor(Math.random() * 1e12)),
    });
    res.json({ message: 'Message sent', result });
  } catch (err) {
    res.status(500).send(`Failed to send message: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}: ${err}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
try {
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log(`Webhook URL: ${DOMAIN}${webhookPath}`);
  });
} catch (err) {
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
}
